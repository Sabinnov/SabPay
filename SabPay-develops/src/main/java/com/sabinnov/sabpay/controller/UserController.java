package com.sabinnov.sabpay.controller;


import com.sabinnov.sabpay.models.User;
import com.sabinnov.sabpay.repository.UserRepository;
import javax.validation.Valid;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.stereotype.Controller;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;



@Controller    // This means that this class is a Controller
@RequestMapping(path="/sab") // This means URL's start with /demo (after Application path)
public class UserController {
	@Autowired // This means to get the bean called userRepository
	           // Which is auto-generated by Spring, we will use it to handle the data
	private UserRepository userRepository;

	@GetMapping(path="/addUser") // Map ONLY GET Requests
	public @ResponseBody String addNewUser (@RequestParam String active
			, @RequestParam String email, @RequestParam String lastname, @RequestParam String name,
                        @RequestParam String password) {
		// @ResponseBody means the returned String is the response, not a view name
		// @RequestParam means it is a parameter from the GET or POST request

		User n = new User();
		n.setActive(active);
		n.setEmail(email);
                n.setLastname(lastname);
                n.setName(name);
                n.setPassword(password);
		userRepository.save(n);
		return "Saved";
	}

	@GetMapping(path="/allUser")
	public @ResponseBody Iterable<User> getAllUsers() {
		// This returns a JSON or XML with the users
		return userRepository.findAll();
	}
        
        @Autowired
         private BCryptPasswordEncoder bCryptPasswordEncoder;
        @RequestMapping(value = "/registration", method = RequestMethod.POST)
	public ModelAndView createNewUser(@Valid @RequestBody User user) {
		ModelAndView modelAndView = new ModelAndView();
		
			//user.setPassword(bCryptPasswordEncoder.encode(user.getPassword()));
        
                        userRepository.save(user);
			modelAndView.addObject("successMessage", "User has been registered successfully");
			modelAndView.addObject("user", new User());
			modelAndView.setViewName("registration");		
		
                        return modelAndView;
	}
}